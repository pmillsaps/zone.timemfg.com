@model IEnumerable<Time.Data.EntityModels.Install.OptionTitleDescpForWordDoc>

@{
    ViewBag.Title = "Option Name and Description for Quote Presentaion Index";
}

<link href="~/Modules/Time.IT/Styles/customStyle.css" rel="stylesheet" />
<link href="~/Modules/Time.IT/Styles/mobirise.css" rel="stylesheet" />

<h2>@ViewBag.Title</h2>

<div align="right">
    @Html.ActionLink("Back to Main Menu", "Index", "Home")
</div>
<hr />
<div class="row">
    <div class="col-md-5">
        <a style="margin-top:17px;" class="btn btn-primary btn-xs" href="@Url.Action("Create", "OptionTitleDescpForWordDocs")">Create New Option and Description</a>
    </div>
    <div class="col-md-3" style="margin-bottom:5px;">@Html.DropDownList("FamilyName", optionLabel: "-- Select Lift Family --")</div>
    <div class="col-md-4">
        <div class="input-group">
            <select id="OptionName" name="OptionName" class="form-control">
                <option>Select Family first</option>
            </select>
            <span class="input-group-btn">
                <input type="submit" value="Go!" class="btn btn-primary" id="optionNameBtn" />
            </span>
        </div>
    </div>
</div>

<div>
    @Html.Partial("_LoadOptionTitlesAndDescr")
</div>
@using (Script.Foot())
{
    <script type="text/javascript">
        // This function appends the ConfigOptions to the table body
        $('#optionNameBtn').click(function () {
            GetOptions();
        });
        // Loading the Options and Descriptions
        function GetOptions() {
            var configUrl = '@Url.Action("LoadOptions", "OptionTitleDescpForWordDocs")';
            var fName = $("#FamilyName").val();
            var oName = $("#OptionName").val();
            if (oName == "Select Family first") {
                oName = GetURLParameter('OptionName');
            }
            var optionsD = $("#optionsDiv");
            $.ajax({
                url: configUrl,
                async: true,
                cache: false,
                type: "GET",
                data: { FamilyName: fName, OptionName: oName },

                success: function (model) {
                    var row = "";

                    if (jQuery.isEmptyObject(model)) {
                        row += "<tr><td colspan= '6' class='warning text-center lead'>No rows match search criteria.</td></tr>";
                    }
                    else {
                        $.each(model, function (index, item) {
                            row += "<tr><td>" + item.FamilyName + "</td><td>" + item.OptionName +
                                   "</td><td>" + item.Description + "</td>" +
                                   "<td><a href='OptionTitleDescpForWordDocs/Edit/" + item.Id + "'><span class='mbri-edit'></span></a></td>" +
                                   "<td><a href='OptionTitleDescpForWordDocs/Details/" + item.Id + "'><span class='mbri-info'></span></a></td>" +
                                   "<td><a href='OptionTitleDescpForWordDocs/Delete/" + item.Id + "'><span class='mbri-trash'></span></a></td></tr>";
                        });
                    }
                    optionsD.html(row);
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert("Error" + xhr.status);
                }
            });
        };// End of GetOptions function

        $(document).ready(function () {
            var fmlyName = GetURLParameter('FamilyName');
            if (fmlyName != null) {
                $("#FamilyName option").filter(function (index) { return $(this).text() === fmlyName; }).attr('selected', 'selected');
                GetOptionsNames();
            }
            
            if ($("#FamilyName").val() != "") {
                GetOptions();
            }
        });

        // Get the URL parameters. This function is used when navigating back to the index page after creating or editing a record.
        function GetURLParameter(sParam) {
            var sPageURL = window.location.search.substring(1);
            var sURLVariables = sPageURL.split('&');
            for (var i = 0; i < sURLVariables.length; i++) {
                var sParameterName = sURLVariables[i].split('=');
                if (sParameterName[0] == sParam) {
                    return decodeURIComponent(sParameterName[1]);
                }
            }
        }

        // Calling the fuction to append options names to the drop down list
        $("#FamilyName").change(function () {
            GetOptionsNames();
        });

        // This function appends the Structures to the ConfigData drop down list
        function GetOptionsNames() {
            var requrl = '@Url.Action("OptionsNamesDropDown", "OptionTitleDescpForWordDocs")';
            var selectedValue = $("#FamilyName").val();
            var configData = $("#OptionName");
            $.ajax({
                url: requrl,
                type: "GET",
                data: { FamilyName: selectedValue },

                error: function (xhr, ajaxOptions, thrownError) {
                    configData.empty();
                    alert(xhr.status + "-Please Select a Lift Family.");
                },

                success: function (result) {
                    configData.empty();

                    if (jQuery.isEmptyObject(result)) {
                        alert("This Lift Family has no Options.");
                    }
                    else {
                        configData.append(
                                $('<option>', {
                                    value: ""
                                }).text("--Select Option Name--")
                                )

                        $.each(result, function () {
                            configData.append(
                                $('<option>', {
                                    value: this.Value
                                }).text(this.Text)
                                )
                        })
                    }
                }
            });
        };// End of ConfigData function
    </script>
}