@model Time.Data.EntityModels.Configurator.ConfigOption

@{
    ViewBag.Title = "Edit Config Option";
}

<h2>@ViewBag.Title</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Config Option</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.ConfigName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.ConfigName, new { @readonly = "readonly", htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ConfigName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ConfigData, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.ConfigData, new { @readonly = "readonly", htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ConfigData, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Key01, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.Key01, new { @readonly = "readonly", htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Key01, "", new { @class = "text-danger" })
            </div>
        </div>

        @if (!String.IsNullOrEmpty(Model.Key02))
        {
            <div class="form-group">
                @Html.LabelFor(model => model.Key02, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.Key02, new { @readonly = "readonly", htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Key02, "", new { @class = "text-danger" })
                </div>
            </div>
        }
        else
        {
            @Html.HiddenFor(model => model.Key02)
        }

        @if (!String.IsNullOrEmpty(Model.Key03))
        {
            <div class="form-group">
                @Html.LabelFor(model => model.Key03, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.Key03, new { @readonly = "readonly", htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Key03, "", new { @class = "text-danger" })
                </div>
            </div>
        }
        else
        {
            @Html.HiddenFor(model => model.Key03)
        }

        @if (!String.IsNullOrEmpty(Model.Key04))
        {
            <div class="form-group">
                @Html.LabelFor(model => model.Key04, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.Key04, new { @readonly = "readonly", htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Key04, "", new { @class = "text-danger" })
                </div>
            </div>
        }
        else
        {
            @Html.HiddenFor(model => model.Key04)
        }

        @if (!String.IsNullOrEmpty(Model.Key05))
        {
            <div class="form-group">
                @Html.LabelFor(model => model.Key05, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.Key05, new { @readonly = "readonly", htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Key05, "", new { @class = "text-danger" })
                </div>
            </div>
        }
        else
        {
            @Html.HiddenFor(model => model.Key05)
        }

        @if (!String.IsNullOrEmpty(Model.Key06))
        {
            <div class="form-group">
                @Html.LabelFor(model => model.Key06, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.Key06, new { @readonly = "readonly", htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Key06, "", new { @class = "text-danger" })
                </div>
            </div>
        }
        else
        {
            @Html.HiddenFor(model => model.Key06)
        }

        @if (!String.IsNullOrEmpty(Model.Key07))
        {
            <div class="form-group">
                @Html.LabelFor(model => model.Key07, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.Key07, new { @readonly = "readonly", htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Key07, "", new { @class = "text-danger" })
                </div>
            </div>
        }
        else
        {
            @Html.HiddenFor(model => model.Key07)
        }

        @if (!String.IsNullOrEmpty(Model.Key08))
        {
            <div class="form-group">
                @Html.LabelFor(model => model.Key08, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.Key08, new { @readonly = "readonly", htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Key08, "", new { @class = "text-danger" })
                </div>
            </div>
        }
        else
        {
            @Html.HiddenFor(model => model.Key08)
        }

        @if (!String.IsNullOrEmpty(Model.Key09))
        {
            <div class="form-group">
                @Html.LabelFor(model => model.Key09, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.Key09, new { @readonly = "readonly", htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Key09, "", new { @class = "text-danger" })
                </div>
            </div>
        }
        else
        {
            @Html.HiddenFor(model => model.Key09)
        }

        @if (!String.IsNullOrEmpty(Model.Key10))
        {
            <div class="form-group">
                @Html.LabelFor(model => model.Key10, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.Key10, new { @readonly = "readonly", htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Key10, "", new { @class = "text-danger" })
                </div>
            </div>
        }
        else
        {
            @Html.HiddenFor(model => model.Key10)
        }

        <div class="form-group">
            @Html.LabelFor(model => model.PartNum, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PartNum, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PartNum, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.InActive, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.InActive)
                    @Html.ValidationMessageFor(model => model.InActive, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index", new { ConfigNames = Model.ConfigName, ConfigData = Model.ConfigData })
</div>
