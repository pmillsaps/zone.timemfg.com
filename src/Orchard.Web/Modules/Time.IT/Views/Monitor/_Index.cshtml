@{
    ViewBag.Title = "Monitor Index";
    //Style.Require("~/Modules/Time.IT/Content/DataTables/css/dataTables.bootstrap.min.css").AtHead();
    //Style.Require("~/Modules/Time.IT/Content/themes/base/jquery-ui.min.css").AtHead();
    Script.Require("jQuery");
    Script.Include("~/Modules/Time.IT/Scripts/jquery-ui-1.12.1.min.js").AtFoot();
    Script.Include("~/Modules/Time.IT/Scripts/DataTables/jquery.dataTables.min.js").AtFoot();
    Script.Include("~/Modules/Time.IT/Scripts/DataTables/dataTables.bootstrap.min.js").AtFoot();
}

<h2>@ViewBag.Title</h2>

<div class=" tablecontainer">
    <a class="popup btn btn-primary" href="/DataTable/Save/0" style="margin-bottom:20px; margin-top:20px;">Add New Monitor</a>
    <table id="myTable" class="table table-striped table-hover">
        <thead>
            <tr class="success">
                <td>Model</td>
                <td>SerialNo</td>
                <td>AssetId</td>
                <td>PurchaseDate</td>
                <td>PurchasedFrom</td>
                <td>PO</td>
                <td>Cost</td>
                <td>M Name</td>
                <td>Size</td>
                <td>U Name</td>
                <td></td>
                <td></td>
                <td></td>
            </tr>
        </thead>
    </table>
</div>

@using (Script.Foot())
{
    <script type="text/javascript">
        $(document).ready(function () {
            var url = '@Url.Action("LoadMonitors", "Monitor")';
            var oTable = $("#myTable").DataTable({
                "ajax": {
                    "url": url,//"~/Modules/Time.IT/Monitor/LoadMonitors",
                    "type": "GET",
                    "datatype": "json"
                },
                "columns": [
                    { "data": "Model", "autoWidth": true },
                    { "data": "SerialNo", "autoWidth": true },
                    { "data": "AssetId", "autoWidth": true },
                    {
                        "data": "PurchaseDate", "autoWidth": true, "render": function () {
                            return (dtConvFromJSON(data));
                        }
                    },
                    { "data": "PurchasedFrom", "autoWidth": true },
                    { "data": "PO", "autoWidth": true },
                    { "data": "Cost", "autoWidth": true },
                    { "data": "ManufacturerId", "autoWidth": true },
                    { "data": "SizeId", "autoWidth": true },
                    {
                        "data": null, "autoWidth": true, "render": function (data, type, row) {
                            return row.User.Name
                        }
                    },
                    {
                        "data": "Id", "width": "20px", "sortable": false, "render": function (data) {
                            return '<a class="popup" href="/Monitor/Save/' + data + '"><img src="~/Media/Default/Page/EditIcon.png" width="20" height="20"/></a>';
                        }
                    },
                    {
                        "data": "Id", "width": "20px", "sortable": false, "render": function (data) {
                            return '<a class="popup" href="/Monitor/Details/' + data + '"><img src="~/Media/Default/Page/DetailIcon.png"  width="20" height="20"/></a>';
                        }
                    },
                    {
                        "data": "Id", "width": "20px", "sortable": false, "render": function (data) {
                            return '<a class="popup" href="/Monitor/Delete/' + data + '"><img src="~/Media/Default/Page/DeleteIcon.png" width="20" height="20"/></a>';
                        }
                    }
                ]
            })
            $('.tablecontainer').on('click', 'a.popup', function (e) {
                e.preventDefault();
                OpenPopup($(this).attr('href'));
            })
            function OpenPopup(pageUrl) {
                var $pageContent = $('<div/>');
                $pageContent.load(pageUrl, function () {
                    $('#popupForm', $pageContent).removeData('validator');
                    $('#popupForm', $pageContent).removeData('unobtrusiveValidation');
                    $.validator.unobtrusive.parse('form');

                });

                $dialog = $('<div class="popupWindow" style="overflow:auto"></div>')
                            .html($pageContent)
                            .dialog({
                                draggable: false,
                                autoOpen: false,
                                resizable: false,
                                model: true,
                                title: 'Popup Dialog',
                                height: 550,
                                width: 600,
                                close: function () {
                                    $dialog.dialog('destroy').remove();
                                }
                            })

                $('.popupWindow').on('submit', '#popupForm', function (e) {
                    var url = $('#popupForm')[0].action;
                    $.ajax({
                        type: "POST",
                        url: url,
                        data: $('#popupForm').serialize(),
                        success: function (data) {
                            if (data.status) {
                                $dialog.dialog('close');
                                oTable.ajax.reload();
                            }
                        }
                    })

                    e.preventDefault();
                })
                $dialog.dialog('open');
            }

            function dtConvFromJSON(data) {
                if (data == null) return '1/1/1950';
                var r = /\/Date\(([0-9]+)\)\//gi
                var matches = data.match(r);
                if (matches == null) return '1/1/1950';
                var result = matches.toString().substring(6, 19);
                var epochMilliseconds = result.replace(/^\/Date\(([0-9]+)([+-][0-9]{4})?\)\/$/, '$1');
                var b = new Date(parseInt(epochMilliseconds));
                var c = new Date(b.toString());
                var curr_date = c.getDate();
                var curr_month = c.getMonth() + 1;
                var curr_year = c.getFullYear();
                var curr_h = c.getHours();
                var curr_m = c.getMinutes();
                var curr_s = c.getSeconds();
                var curr_offset = c.getTimezoneOffset() / 60
                var d = curr_month.toString() + '/' + curr_date + '/' + curr_year;// + " " + curr_h + ':' + curr_m + ':' + curr_s;
                return d;
            }
        });
    </script>
}
@*@model IEnumerable<Time.Data.EntityModels.ITInventory.Monitor>

    @{
        ViewBag.Title = "Monitor Index";
    }

    <h2>@ViewBag.Title</h2>

    <p>
        @Html.ActionLink("Create New", "Create")
    </p>

    <hr />

    <table class="table table-striped table-bordered table-condensed table-hover">
        <tr class="success">
            <th>
                @Html.DisplayNameFor(model => model.Model)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.SerialNo)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.AssetId)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.PurchaseDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.PurchasedFrom)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.PO)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Cost)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Ref_Manufacturer.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Ref_MonitorSizes.Size)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.User.Name)
            </th>
            <th></th>
        </tr>

        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Model)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.SerialNo)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.AssetId)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PurchaseDate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PurchasedFrom)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PO)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Cost)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Ref_Manufacturer.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Ref_MonitorSizes.Size)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.User.Name)
                </td>
                <td>
                    @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                    @Html.ActionLink("Details", "Details", new { id = item.Id }) |
                    @Html.ActionLink("Delete", "Delete", new { id = item.Id })
                </td>
            </tr>
        }
    </table>*@