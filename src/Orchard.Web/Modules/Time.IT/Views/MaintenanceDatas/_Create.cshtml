@model Time.IT.ViewModel.EditMaintenanceDataViewModel

@{
    //Style.Require("jQueryUI_DatePicker").AtHead();
    //Script.Require("jQueryUI_DatePicker").AtFoot();
    ViewBag.Title = "Create";
}

<h3>@ViewBag.Title</h3>
@using (Html.BeginForm("Create", "MaintenanceDatas", FormMethod.Post, new { id = "popupForm" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <div class="form-group">
            @Html.LabelFor(model => model.CompanyName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.CompanyName, new { htmlAttributes = new { @class = "form-control", @placeholder = "Required field" } })
                @Html.ValidationMessageFor(model => model.CompanyName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.BudgetItem, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.BudgetItem, new { htmlAttributes = new { @class = "form-control", @placeholder = "Required field" } })
                @Html.ValidationMessageFor(model => model.BudgetItem, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Supplier, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.Supplier, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Supplier, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.AccountNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.AccountNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.AccountNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.OriginalPurchDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.OriginalPurchDate, new { htmlAttributes = new { @class = "form-control showDatePicker" } })
                @Html.ValidationMessageFor(model => model.OriginalPurchDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ComputerId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-8">
                @Html.DropDownList("ComputerId", null, "--  Optional  --", new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ComputerId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LicenseId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-8">
                @Html.DropDownList("LicenseId", null, "--  Optional  --", new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LicenseId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-8">
                <input id="saveBtn" type="submit" value="Save" class="btn btn-primary" />
                <input type="button" value="Close" data-dismiss="modal" class="btn btn-primary" />
            </div>
        </div>
    </div>
}

@using (Script.Foot())
{
    <script type="text/javascript">
        //$(".showDatePicker").datepicker({
        //    showOtherMonths: true,
        //    selectOtherMonths: true
        //});

        //var enforceModalFocusFn = $.fn.modal.Constructor.prototype.enforceFocus;

        //$.fn.modal.Constructor.prototype.enforceFocus = function () { };
    </script>
}

