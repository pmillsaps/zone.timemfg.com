@model IEnumerable<Time.Data.EntityModels.TimeMFG.LoadListJob>

<table class="table table-striped table-bordered table-condensed table-hover">
    <thead>
        <tr class="success">
            <th>
                <strong>ShpDate</strong><div class="hidden-print"><div class="hidden-print">@Html.ActionLink("▲", "AsmInspect", new { sortOrder = ViewBag.ShipDateUp })@Html.ActionLink("▼", "AsmInspect", new { sortOrder = ViewBag.ShipDateDown })</div>
            </th>
            <th>
                <strong>MakeRdy</strong><div class="hidden-print"> @Html.ActionLink("✓", "AsmInspect", new { sortOrder = ViewBag.MakeReadyCheck }) @Html.ActionLink("☐", "AsmInspect", new { sortOrder = ViewBag.MakeReadyNot })
            </th>
            <th>
                <strong>Name </strong><div class="hidden-print">@Html.ActionLink("▲", "AsmInspect", new { sortOrder = ViewBag.NameUp })@Html.ActionLink("▼", "AsmInspect", new { sortOrder = ViewBag.NameDown })</div>
            </th>
            <th>
                <strong>Serial No</strong><div class="hidden-print"> @Html.ActionLink("▲", "AsmInspect", new { sortOrder = ViewBag.SerialUp })@Html.ActionLink("▼", "AsmInspect", new { sortOrder = ViewBag.SerialDown })</div>
            </th>
            <th>
                <strong>Job Number</strong><div class="hidden-print">@Html.ActionLink("▲", "AsmInspect", new { sortOrder = ViewBag.JobUp })@Html.ActionLink("▼", "AsmInspect", new { sortOrder = ViewBag.JobDown })</div>
            </th>
            <th>
                <strong>LiftModel</strong><div class="hidden-print">@Html.ActionLink("▲", "AsmInspect", new { sortOrder = ViewBag.LiftUp })@Html.ActionLink("▼", "AsmInspect", new { sortOrder = ViewBag.LiftDown })</div>
            </th>
            <th>
                <strong>Claim </strong><div class="hidden-print">@Html.ActionLink("✓", "AsmInspect", new { sortOrder = ViewBag.ClaimedCheck }) @Html.ActionLink("☐", "AsmInspect", new { sortOrder = ViewBag.ClaimedNot })</div>
            </th>
            @*Using <p> tags so that all the checkbox columns are the same size.  Using Alt + 0160 for the spaces so they show up*@
            <th>
                <strong>  RT  </strong><div class="hidden-print">@Html.ActionLink("✓", "AsmInspect", new { sortOrder = ViewBag.RTCheck }) @Html.ActionLink("☐", "AsmInspect", new { sortOrder = ViewBag.RTNot })</div>
            </th>
            <th>
                <strong> Test  </strong><div class="hidden-print">@Html.ActionLink("✓", "AsmInspect", new { sortOrder = ViewBag.TestCheck }) @Html.ActionLink("☐", "AsmInspect", new { sortOrder = ViewBag.TestNot })</div>
            </th>
            <th>
                <strong> Blue </strong><div class="hidden-print">@Html.ActionLink("✓", "AsmInspect", new { sortOrder = ViewBag.BlueCheck }) @Html.ActionLink("☐", "AsmInspect", new { sortOrder = ViewBag.BlueNot })</div>
            </th>
            <th>
                <strong> Box </strong><div class="hidden-print">@Html.ActionLink("✓", "AsmInspect", new { sortOrder = ViewBag.BoxCheck }) @Html.ActionLink("☐", "AsmInspect", new { sortOrder = ViewBag.BoxNot })</div>
            </th>
            <th>
                <strong> Ship </strong><div class="hidden-print">@Html.ActionLink("✓", "AsmInspect", new { sortOrder = ViewBag.ShipCheck }) @Html.ActionLink("☐", "AsmInspect", new { sortOrder = ViewBag.ShipNot })</div>
            </th>
            <th>
                <strong> Ped  </strong><div class="hidden-print">@Html.ActionLink("✓", "AsmInspect", new { sortOrder = ViewBag.PedCheck }) @Html.ActionLink("☐", "AsmInspect", new { sortOrder = ViewBag.PedNot })</div>
            </th>
            <th>
                <strong>  OR  </strong><div class="hidden-print">@Html.ActionLink("✓", "AsmInspect", new { sortOrder = ViewBag.ORCheck }) @Html.ActionLink("☐", "AsmInspect", new { sortOrder = ViewBag.ORNot })</div>
            </th>
            <th>
                <strong> Bukt </strong><div class="hidden-print">@Html.ActionLink("✓", "AsmInspect", new { sortOrder = ViewBag.BuktCheck }) @Html.ActionLink("☐", "AsmInspect", new { sortOrder = ViewBag.BuktNot })</div>
            </th>
            <th>
                <strong>Green </strong><div class="hidden-print">@Html.ActionLink("✓", "AsmInspect", new { sortOrder = ViewBag.GreenCheck }) @Html.ActionLink("☐", "AsmInspect", new { sortOrder = ViewBag.GreenNot })</div>
            </th>
            <th>
                <strong>LShip </strong><div class="hidden-print">@Html.ActionLink("✓", "AsmInspect", new { sortOrder = ViewBag.LShipCheck }) @Html.ActionLink("☐", "AsmInspect", new { sortOrder = ViewBag.LShipNot })</div>
            </th>
        </tr>
    </thead>
    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.LoadList.DateSchedShip)
            </td>
            <td>
                @Html.EditorFor(modelItem => item.LoadList.MakeReady, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.LoadList.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.SerialNo)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.JobNumber)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.LiftModel)
            </td>
            <td>
                @Html.EditorFor(modelItem => item.Claimed, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
            </td>
            <td>
                @Html.EditorFor(modelItem => item.ReadyToTest, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
            </td>
            <td>
                @Html.EditorFor(modelItem => item.Tested, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
            </td>
            <td>
                @Html.EditorFor(modelItem => item.Blue, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
            </td>
            <td>
                @Html.EditorFor(modelItem => item.Box, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
            </td>
            <td>
                @Html.EditorFor(modelItem => item.Ship, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
            </td>
            <td>
                @if (item.Ped_Ignored != true)
                {
                    @Html.EditorFor(modelItem => item.Ped, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                }
                else
                {
                    //should display nothing
                }
            </td>
            <td>
                @if (item.OutRigger_Ignored != true)
                {
                    @Html.EditorFor(modelItem => item.OutRigger, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                }
                else
                {
                    //should display nothing
                }
            </td>
            <td>
                @if (item.Bucket_Ignored != true)
                {
                    @Html.EditorFor(modelItem => item.Bucket, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                }
                else
                {
                    //should display nothing
                }
            </td>
            <td>
                @Html.EditorFor(modelItem => item.Green, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
            </td>
            <td>
                @Html.EditorFor(modelItem => item.LShip, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
            </td>
        </tr>
    }
</table>